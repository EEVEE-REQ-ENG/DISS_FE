// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 8agbNLNcNYck5Uiy6uxxU6
// Component: d8OBbxZkdrmw
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_blank_project.module.css"; // plasmic-import: 8agbNLNcNYck5Uiy6uxxU6/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: d8OBbxZkdrmw/css

export const PlasmicHomepage__VariantProps = new Array();

export const PlasmicHomepage__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicHomepage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <section
            data-plasmic-name={"section"}
            data-plasmic-override={overrides.section}
            className={classNames(projectcss.all, sty.section)}
          />

          <div
            data-plasmic-name={"login"}
            data-plasmic-override={overrides.login}
            className={classNames(projectcss.all, sty.login)}
          >
            <div
              data-plasmic-name={"group4"}
              data-plasmic-override={overrides.group4}
              className={classNames(projectcss.all, sty.group4)}
            >
              <div
                data-plasmic-name={"loginForm"}
                data-plasmic-override={overrides.loginForm}
                className={classNames(projectcss.all, sty.loginForm)}
              >
                <div
                  data-plasmic-name={"rectangle106"}
                  data-plasmic-override={overrides.rectangle106}
                  className={classNames(projectcss.all, sty.rectangle106)}
                />

                <div
                  data-plasmic-name={"button32"}
                  data-plasmic-override={overrides.button32}
                  className={classNames(projectcss.all, sty.button32)}
                >
                  <div
                    data-plasmic-name={"rectangle107"}
                    data-plasmic-override={overrides.rectangle107}
                    className={classNames(projectcss.all, sty.rectangle107)}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fhRh
                    )}
                  >
                    {"Autentificare"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"group25"}
                  data-plasmic-override={overrides.group25}
                  className={classNames(projectcss.all, sty.group25)}
                >
                  <div
                    data-plasmic-name={"rectangle108"}
                    data-plasmic-override={overrides.rectangle108}
                    className={classNames(projectcss.all, sty.rectangle108)}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__n59Nh
                    )}
                  >
                    {"AdresÄƒ de e-mail"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"group26"}
                  data-plasmic-override={overrides.group26}
                  className={classNames(projectcss.all, sty.group26)}
                >
                  <div
                    data-plasmic-name={"rectangle109"}
                    data-plasmic-override={overrides.rectangle109}
                    className={classNames(projectcss.all, sty.rectangle109)}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vhSjs
                    )}
                  >
                    {"Parola"}
                  </div>
                </div>
                <div
                  data-plasmic-name={"padlock1"}
                  data-plasmic-override={overrides.padlock1}
                  className={classNames(projectcss.all, sty.padlock1)}
                />
              </div>
            </div>
            <div
              data-plasmic-name={"header12"}
              data-plasmic-override={overrides.header12}
              className={classNames(projectcss.all, sty.header12)}
            >
              <div
                data-plasmic-name={"rectangle110"}
                data-plasmic-override={overrides.rectangle110}
                className={classNames(projectcss.all, sty.rectangle110)}
              />

              <div
                data-plasmic-name={"ubbLogo12"}
                data-plasmic-override={overrides.ubbLogo12}
                className={classNames(projectcss.all, sty.ubbLogo12)}
              />

              <div
                data-plasmic-name={"psihoLogo12"}
                data-plasmic-override={overrides.psihoLogo12}
                className={classNames(projectcss.all, sty.psihoLogo12)}
              />
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "section",
    "login",
    "group4",
    "loginForm",
    "rectangle106",
    "button32",
    "rectangle107",
    "group25",
    "rectangle108",
    "group26",
    "rectangle109",
    "padlock1",
    "header12",
    "rectangle110",
    "ubbLogo12",
    "psihoLogo12"
  ],

  section: ["section"],
  login: [
    "login",
    "group4",
    "loginForm",
    "rectangle106",
    "button32",
    "rectangle107",
    "group25",
    "rectangle108",
    "group26",
    "rectangle109",
    "padlock1",
    "header12",
    "rectangle110",
    "ubbLogo12",
    "psihoLogo12"
  ],

  group4: [
    "group4",
    "loginForm",
    "rectangle106",
    "button32",
    "rectangle107",
    "group25",
    "rectangle108",
    "group26",
    "rectangle109",
    "padlock1"
  ],

  loginForm: [
    "loginForm",
    "rectangle106",
    "button32",
    "rectangle107",
    "group25",
    "rectangle108",
    "group26",
    "rectangle109",
    "padlock1"
  ],

  rectangle106: ["rectangle106"],
  button32: ["button32", "rectangle107"],
  rectangle107: ["rectangle107"],
  group25: ["group25", "rectangle108"],
  rectangle108: ["rectangle108"],
  group26: ["group26", "rectangle109"],
  rectangle109: ["rectangle109"],
  padlock1: ["padlock1"],
  header12: ["header12", "rectangle110", "ubbLogo12", "psihoLogo12"],
  rectangle110: ["rectangle110"],
  ubbLogo12: ["ubbLogo12"],
  psihoLogo12: ["psihoLogo12"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHomepage__ArgProps,
          internalVariantPropNames: PlasmicHomepage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    login: makeNodeComponent("login"),
    group4: makeNodeComponent("group4"),
    loginForm: makeNodeComponent("loginForm"),
    rectangle106: makeNodeComponent("rectangle106"),
    button32: makeNodeComponent("button32"),
    rectangle107: makeNodeComponent("rectangle107"),
    group25: makeNodeComponent("group25"),
    rectangle108: makeNodeComponent("rectangle108"),
    group26: makeNodeComponent("group26"),
    rectangle109: makeNodeComponent("rectangle109"),
    padlock1: makeNodeComponent("padlock1"),
    header12: makeNodeComponent("header12"),
    rectangle110: makeNodeComponent("rectangle110"),
    ubbLogo12: makeNodeComponent("ubbLogo12"),
    psihoLogo12: makeNodeComponent("psihoLogo12"),
    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
